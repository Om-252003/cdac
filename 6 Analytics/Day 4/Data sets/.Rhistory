reg = lm(y-x)  ; reg
x = c(15,	12,	16,	13,	17,	14,	18,	11)
y = c(17, 14,	20,	25,	23,	24 ,22 ,21)
reg = lm(y~x)  ; reg
#### ####
attach(mtcars)
install.packages("tidyverse")
library(tidyverse)
?diamonds
View(diamonds)
diamonds %>%
mutate(
JustOne = 1,
Values = "Something",
Simple = TRUE
)
names(diamonds)
View(diamonds)
df = diamonds %>%
mutate(
JustOne = 1,
Values = "Something",
Simple = TRUE
)
names(df)
View(df)
length(df)
length(diamonds)
nrows(df)
df.nrows()
dim(df)
dim(df)[1]
diamonds %>%
mutate(price200 = price - 200, # $200 OFF from the original price
price20perc = price * 0.20, # 20% of the original price
price20percoff = price * 0.80, # 20% OFF from the original price
pricepercarat = price / carat, # ratio of price to carat
pizza = depth ^ 2) # Square the original depth
diamonds.new <- # saving changes to diamonds as a new object
diamonds %>% # original dataset
mutate(price200 = price - 200, # $200 OFF from the original price
price20perc = price * .20, # 20% of the original price
price20percoff = price * 0.80, # 20% OFF from the original price
pricepercarat = price / carat, # ratio of price to carat
pizza = depth ^ 2) # Square the original depth
View(diamonds.new)
diamonds %>%
mutate(m = mean(price))
View(diamonds)
diamonds %>%
mutate(m = mean(price), # calculates the mean price
sd = sd(price), # calculates standard deviation
med = median(price)) # calculates the median price
class(diamonds)
# Create a column named avg.pop.den which calculates average population density for the entire dataset
# (hint: use mean() and popdensity; all values in this column should be the same – Why?)
View(midwest)
midwest.mutate(
avg.pop.den = mean(popdensity)
)
midwest %>% mutate(
avg.pop.den = mean(popdensity)
)
midwest
head(midwest)
d1 = midwest %>% mutate(
avg.pop.den = mean(popdensity)
)
head(d1)
View(d1)
class(midwest)
d1 %>% mutate(
avg.area = mean(area)
)
View(d1)
d1 %>% mutate(
avg.area = mean(area)
)
View(d1)
View(d1$avg.area)
View(d1$avg.pop.den)
View(midwest)
d1 = midwest %>% mutate(
avg.pop.den = mean(popdensity)
)
View(d1)
# b. Create a column named avg.area which c
# alculates the average area for the entire dataset
d1 %>% mutate(
avg.area = mean(area)
)
View(d1$avg.pop.den)
View(d1$avg.area)
View(d1)
d1 = d1 %>% mutate(
avg.area = mean(area)
)
View(d1)
# recode()
unique(diamonds$cut)
diamonds_new = diamonds_new %>% mutate(
cut_new = recode(cut,
"Ideal" = "IDEAL")
)
diamonds %>%
mutate(
JustOne = 1,
Values = "Something",
Simple = TRUE
)
names(diamonds) # It is just being visualized and not stored
View(diamonds)  # There are no newly added columns  present in this
# because this data set is from CRAN repo,
# we can't modify that
# so we can store the results in objects
df = diamonds %>%
mutate(
JustOne = 1,
Values = "Something",
Simple = TRUE
)
# now it will store the result into the df
names(df)
View(df)
dim(df) # 53940    13 || row   column
diamonds %>%
mutate(price200 = price - 200, # $200 OFF from the original price
price20perc = price * 0.20, # 20% of the original price
price20percoff = price * 0.80, # 20% OFF from the original price
pricepercarat = price / carat, # ratio of price to carat
pizza = depth ^ 2) # Square the original depth
diamonds_new <- # saving changes to diamonds as a new object
diamonds %>% # original dataset
mutate(price200 = price - 200, # $200 OFF from the original price
price20perc = price * .20, # 20% of the original price
price20percoff = price * 0.80, # 20% OFF from the original price
pricepercarat = price / carat, # ratio of price to carat
pizza = depth ^ 2) # Square the original depth
diamonds %>%
mutate(m = mean(price))
View(diamonds_new)
diamonds_new %>%
mutate(m = mean(price), # calculates the mean price
sd = sd(price), # calculates standard deviation
med = median(price)) # calculates the median price
class(diamonds_new)
# *******************************************************************
# Midwest Dataset
# Create a column named avg.pop.den
# which calculates average population density for entire dataset
# (hint: use mean() and popdensity; all values in this column should be the same – Why?)
View(midwest)
d1 = midwest %>% mutate(
avg.pop.den = mean(popdensity)
)
View(d1)
# b. Create a column named avg.area which c
# alculates the average area for the entire dataset
d1 = d1 %>% mutate(
avg.area = mean(area)
)
View(d1)
# ****************************************************************************
# recode()  # modifies values in variables
unique(diamonds$cut)
diamonds_new = diamonds_new %>% mutate(
cut_new = recode(cut,
"Ideal" = "IDEAL")
)
diamonds_new = diamonds_new %>% mutate(
cut_new = recode(cut,   # If we don't write cut_new it will modify cut column
"Fair" = "Ok",
"Premium" = "Pizza")
)
str(ds)
d1$avg.pop.den
gender = factor(c("male", "m","M", "Female" ,"Female","Female" ))
testscore = c(10,20,10,25,12,5)
ds =tibble(gender, testscore)
str(ds)
ds
ds = ds %>% mutate(
gender = recode(gender,
c("m", "M") = "male")
gender = factor(c("male", "m","M", "Female" ,"Female","Female" ))
testscore = c(10,20,10,25,12,5)
ds =tibble(gender, testscore)
ds
ds = ds %>% mutate(
gender = recode(gender,
c("m", "M") = "male")
ds = ds %>% mutate(
gender = recode(gender,
"m" = "male")
)
ds
ds = ds %>% mutate(
gender = recode(gender,
"m" = "male",
"M" = "male")
)
ds = ds %>% mutate(
gender = recode(gender,
"m" = "male",
"M" = "male")
)
ds
diamonds %>% summarize(avg_price = mean(price))
diamonds_new= diamonds %>% summarize(avg_price = mean(price))
gender = c(rep("male","female"), 25)
age = c(sample(20:39), 25, replcae=T)
gender = c(rep("male","female", 25))
age = c(sample(20:39), 25, replcae=T)
id = 1:25
gender = c(rep("male","female", 25))
age = c(sample(20:39), 25, replcae=T)
score = sample(seq(0,1, by = 0.01), 25,replace=T)
data = (id,gender,age,score)
data = tibble(id,gender,age,score)
id = 1:25
gender = c(rep("male","female", 25))
age = c(sample(20:39, 25, replcae=T))
score = sample(seq(0,1, by = 0.01), 25,replace=T)
id = 1:25
gender = c(rep("male","female", 25))
age = c(sample(20:39, 25, replace=T))
score = sample(seq(0,1, by = 0.01), 25,replace=T)
data = tibble(id,gender,age,score)
data
id = 1:25
gender = c(rep("male","female", 25))
age = c(sample(20:39, 25, replace=T))
score = sample(seq(0,1, by = 0.001), 25,replace=T)
data = tibble(id,gender,age,score)
data
data1 = as.data.frame(data)
id = 1:25
gender = c(rep("male","female", 25))
age = c(sample(20:39, 25, replace=T))
score = sample(seq(0,1, by = 0.001), 25,replace=T)
data = tibble(id,gender,age,score)
data
id = 1:25
gender = c(rep("male","female", 25))
age = c(sample(20:39, 25, replace=T))
score = sample(seq(0,1, by = 0.001), 25,replace=T)
data = tibble(id,gender,age,score)
data
data1 = as.data.frame(data)
data1
count(data)
?nrow
nrow(data)
data %>%
group_by(gender) %>%
summarize(m = mean(score), # calculates the mean
s = sd(score), # calculates the standard deviation
n = n()) %>% # calculates the total number of observations
ungroup()
data1 = data %>%
group_by(gender) %>%
summarize(m = mean(score), # calculates the mean
s = sd(score), # calculates the standard deviation
n = n()) %>% # calculates the total number of observations
ungroup()
data1
id = 1:25
gender = c(rep("male","female", 25))
age = c(sample(20:39, 25, replace=T))
score = sample(seq(0,1, by = 0.001), 25,replace=T)
data = tibble(id,gender,age,score)
data
data1 = as.data.frame(data)
data1
data1 = data %>%
group_by(gender,
mutate( m = mean(score))
%>%
ungroup()
)
data1 = data %>%
group_by(Sex) %>%
mutate(m = mean(Score)) %>% # calculates mean score by Sex
ungroup()
data1 = data %>%
group_by(gender) %>%
mutate(m = mean(score)) %>% # calculates mean score by Sex
ungroup()
data1
?cor
marks = 10:100
hrs = 1:10
?cor
cor(marks~hrs)
?cor
cor(marks,hrs)
marks = 10:100
hrs = 1:10
cor(marks,hrs)
marks = seq(10,100,10)
hrs = 1:10
?cor
cor(marks,hrs)
plot(marks,hrs)
abline(lm(marks~hrs), col="red")
cor(marks,hrs, method = "spearman")
plot(marks,hrs)
plot(marks,hrs)
abline(lm(hrs~marks), col="red")
str(iris)
summarise(iris)
View(iris)
summary(iris)
iris_new = iris %>% group_by(Species) %>%
mutate(m = mean(Sepal.Length))
ungroup()
iris_new = iris %>%
group_by(Species) %>%
mutate(m = mean(Sepal.Length)) %>%
ungroup()
iris_new
?boxplot()
# Boxplot of Petal.Length across Species
boxplot(Petal.Length ~ Species,
data = iris,
main = "Boxplot of Petal.Length by Species",
xlab = "Species",
ylab = "Petal Length (cm)",
col = c("lightblue", "lightgreen", "lightpink"))
# Boxplot of Petal.Length across Species
boxplot(Petal.Length ~ Species,
data = iris,
main = "Boxplot of Petal.Length by Species",
xlab = "Species",
ylab = "Petal Length (cm)",
col = c("lightblue", "lightgreen", "lightpink")
horizontal = T)
?boxplot()
# Boxplot of Petal.Length across Species
boxplot(Petal.Length ~ Species,
data = iris,
main = "Boxplot of Petal.Length by Species",
xlab = "Species",
ylab = "Petal Length (cm)",
col = c("lightblue", "lightgreen", "lightpink")
horizontal = TRUE)
# Boxplot of Petal.Length across Species
boxplot(Petal.Length ~ Species,
data = iris,
main = "Boxplot of Petal.Length by Species",
xlab = "Species",
ylab = "Petal Length (cm)",
col = c("lightblue", "lightgreen", "lightpink"),
horizontal = T)
diamonds %>%
group_by(clarity) %>%
summarise(avg_price = mean(price))
View(diamonds)
diamonds %>%
group_by(cut)%>%
summarise(median_depth_by_cut = median(depth))
diamonds %>%
mutate(cut =
recode(cut,
"Fair" : "accha",
"Good" : "bohot accha",
"Very Good" : "Zabardast",
"Premium" : "Lajawab",
"Ideal" : "Thik Thak")
)
diamonds %>%
mutate(cut =  recode(cut,
"Fair" : "accha",
"Good" : "bohot accha",
"Very Good" : "Zabardast",
"Premium" : "Lajawab",
"Ideal" : "Thik Thak"
)
)
diamonds %>%
mutate(cut = recode(cut,
"Fair" = "accha",
"Good" = "bohot accha",
"Very Good" = "Zabardast",
"Premium" = "Lajawab",
"Ideal" = "Thik Thak"))
diamonds %>%
group_by(color)%>%
summarise(modal color = mode(color)))
diamonds %>%
group_by(color)%>%
summarise(modal_color = mode(color)))
diamonds %>%
summarise(modal_color = mode(color)))
diamonds %>%
summarise(modal_color = mode(color))
diamonds %>%
summarize(modal_color = mode(color))
diamonds %>%
summarize(modal_color = mode(color))
mode <- function(x) {
y = table(x)
return (names(y)[which(y == max(y))])
}
diamonds %>%
summarize(modal_color = mode(color))
# filter() # only retain specific rows that meet specified condition
diamonds %>% filter(cut == "Fair")
diamonds %>% filter(cut == "Fair" | cut == "Good", price<=600)
diamonds %>% filter(cut %in% c("Fair", "Good"), price<=600)
diamonds %>% filter(cut == "Fair", cut == "Good")
diamonds %>% filter(cut == "Fair" & cut == "Good")
diaonds %>% filter(cut %in% c("Good", "Very Good", "Fair"), price %in% c(2000:3000),color %in% c("D","E","F","G"))
diamonds %>% filter(cut %in% c("Good", "Very Good", "Fair"), price %in% c(2000:3000),color %in% c("D","E","F","G"))
diamonds %>% filter(cut != "Fair")
# ***************************************************
# select() # selects onyl columns that we want
diamonds %>% select(cut, color)
diamonds %>% select(c(1,2))
diamonds %>% select(1,2)
diamonds %>% select(-1)
diamonds %>% select(-c(1:3))
diamonds %>% arrange(cuts)
diamonds %>% arrange(cut)
diamonds %>% arrange(desc(price))
# count number of rows per each cut
diamonds %>% count(cut)
# this is same as
diamonds %>% group_by(cut) %>% count()
diamonds %>% rename(PRICE = price )
diamonds %>% rename(price = PRICE )
diamonds %>% rename(PRICE = price )
diamonds %>% select(carat, cut, price, color)
#2 Exclude columns x, y and z
diamonds %>% select(-x,-y,-z)
diamonds %>% arrange(desc(cut))
View(diamonds)
diamonds %>% mutate(
price_per_carat = price/carat
)
diamonds %>% mutate(
volume = x*y*z
)
diamonds %>% filter(carat == 0.7)%>% group_by(cut)%>% mutate(median_price = median(price))
diamonds %>%
filter(cut == "Premium", color == "E", carat > 1) %>%
summarise(avg_price = mean(price))
diamonds %>%
count(clarity, sort = TRUE) %>%
slice_head(n = 1)
diamonds %>%
filter(cut == "Premium", color == "E", carat > 1) %>%
summarise(avg_price = mean(price))
diamonds %>%
filter(cut == "Premium", color == "E", carat > 1) %>%
summarize(avg_price = mean(price))
diamonds %>% mutate(
expensive = price > 10000
)
diamonds %>%
count(clarity, sort = TRUE) %>%
slice_head(n = 1)
diamonds %>%
count(clarity, sort = TRUE)
diamonds %>%
count(clarity, sort = TRUE) %>%
slice_head(n = 1)
diamonds %>%
- group_by(clarity) %>%
summarize (count = n()) %›%
arrange (desc (count) )
diamonds %>%
- group_by(clarity) %>%
summarize (count = n()) %>%
arrange (desc (count) )
diamonds %>%
count(clarity, sort = TRUE) %>%
slice_head(n = 1)
diamonds %>%
group_by(clarity) %>%
summarize (count = n()) %>%
arrange (desc (count) )
diamonds %>%
count (clarity) %>%
filter(n == max(n))
data1 <- read.csv("D:/cdac/6 Analytics/Day 4/Data sets/Titanic_space_separated.txt", sep="")
View(data1)
data1
class(data1)
# Get working directory
getwd()
source("D:/cdac/6 Analytics/Day 4/first.R")
setwd("D:/cdac/6 Analytics/Day 4/working directory practice/")
setwd("D:/cdac/6 Analytics/Day 4/working directory practice/")
getwd()
setwd("D:/cdac/6 Analytics/Day 4/Data Sets/")
file1 = read.table("Titanic_space_separated.txt", header = TRUE)
file1
file2 = read.table("Orange_comma_separated.txt", sep = ",", header = T)
file2 = read.table("Orange_comma_separated Orignial.txt", sep = ",", header = T)
file2 = read.table("Orange_comma_separated Original.txt", sep = ",", header = T)
file2
write.table(file1, "New_Titanic1.txt") # wd is already set so no worries of location
write.table(file1, "New_Titanic_$_separated.txt", sep = "$")
file3 = read.csv("diamonds.csv" , header = TRUE)
file3
write.csv(file3,"D:/cdac/6 Analytics/Day 4/Data Sets/New_diaonds.csv", sep = "," )
file4 = read.csv("New_diaonds.csv" , header = TRUE)
file4
file4 = read.csv("New_diaonds.csv" , header = TRUE, sep=",")
file4
write.csv(file3,"D:/cdac/6 Analytics/Day 4/Data Sets/New_diamonds.csv", sep = "," )
