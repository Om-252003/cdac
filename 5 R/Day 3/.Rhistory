?list
l1 = list(1,2,3,4.1,'Abc', TRUE, FALSE, c(10,20), seq(90:92))
l1
l1 = list(1,2,3,4.1,'Abc', TRUE, FALSE)
l1
l1 = list(1,2,3,4.1,'Abc', TRUE, FALSE,, c(10,20), seq(90:92))
l1
l1 = list(1,2,3,4.1,'Abc', TRUE, FALSE,"", c(10,20), seq(90:92))
l1
l1 = list(1,2,3,4.1,'Abc', TRUE, FALSE, NA, c(10,20), seq(90:92))
l1
l1 = list(1,2,3,4.1,'Abc', TRUE, FALSE, NA,NULL, c(10,20), seq(90:92))
l1
class(l1)
l1 = list(1,2,3,4.1,'Abc', TRUE, FALSE, NA,NULL, c(10,20), seq(90:92), list(80,90), max(1,2))
l1
l1 = list(1,2,3,4.1,'Abc', TRUE, FALSE, NA,NULL, c(10,20), seq(90,92), list(80,90), max(1,2))
l1
l1 = list(1,2,3,4.1,'Abc', TRUE, FALSE, NA,NULL, c(10,20), seq(90,92), list(80,90), max(1,2), matrix(c(1,2,3,4), nrow = 2))
l1
names(l1)
l1 = list(1,2,3,4.1,'Abc', TRUE, FALSE, NA,NULL,
v1 <- c(10,20), v2<- seq(90,92),
Inner_list <- list(80,90),
maxi <- max(1,2),
m1 <- matrix(c(1,2,3,4), nrow = 2)
)
l1
class(l1)
names(l1)
l1$maxi
l1 = list(1,2,3,4.1,'Abc', TRUE, FALSE, NA,NULL,
v1 = c(10,20), v2<- seq(90,92),
Inner_list = list(80,90),
maxi = max(1,2),
m1 = matrix(c(1,2,3,4), nrow = 2)
)
l1
l1 = list(1,2,3,4.1,'Abc', TRUE, FALSE, NA,NULL,
v1 = c(10,20),
v2 =  seq(90,92),
Inner_list = list(80,90),
maxi = max(1,2),
m1 = matrix(c(1,2,3,4), nrow = 2)
)
l1
l1 = list(1,2,3,4.1,'Abc', TRUE, FALSE, NA,NULL,
v1 = c(10,20),
v2 =  seq(90,92),
Inner_list = list(80,90),
maxi = max(1,2),
m1 = matrix(c(1,2,3,4), nrow = 2)
)
l1
names(l1)
l1[1]
l1[1][1]
cat(l1[1])
print(l1[1])
l1[1]
l1[1][1]
l1[2]
l1[3]
l1[4]
l1[5]
l1[6]
l1[7]
l1[8]
l1[9]
l1[10]
l1[11]
l1[12]
l1[13]
l1[14]
l1[15]
l1[1]  ; l1[[1]]
l1[1][1] ; l1[[1]][1]
l1[1][1] ; l1[[1]][1][1]
l1[1][1] ; l1[[1]][1][1][1][1]
l1[2]    ; l1[[2]]
l1[10]
l1[10]   ; l1[10][2]
l1[10]   ; l1[10][2] # $<NA> NULL  ; l1[[10]][2]
l1[10]   ; l1[10][2] # $<NA> NULL  ; l1[[10]][[2]]
l1[10]   ; l1[10][2] # $<NA> NULL  ; l1[[10]][[1]]
l1[10]   ; l1[10][2] # $<NA> NULL  ; l1[[10]][1]
l1[[10]][1]
l1[[10]][2]
l1[[10]][1:]
l1[[10]][1,]
l1[[10]][1,2]
l1[[10]][1:2]
l1[1]    ; l1[[1]]
l1[1][1] ; l1[[1]][1][1][1][1] # infinite [1] works
l1[2]    ; l1[[2]]
l1[3]
l1[4]
l1[5]
l1[6]
l1[7]
l1[8]
l1[9]
l1[10]   ; l1[10][2] # $<NA> NULL  ;
l1[[10]][1]   # 10
l1[[10]][2]   # 20
l1[[10]][1:2]  # 10 20
l1[11]
l1[12]
l1[13]
l1[14]
l1[15]
merged.list
?merged.list
li = list('java','python')  ; li
li2 = append(l1,2)  ; li2
li2 = append(li,2)  ; li2
li2 = append(li,2)  ; li2
li2 = append(li,'R', after=2)  ; li2
li2 = append(li, 2:3)  ; li2
li2 = append(li,'R', after=2)  ; li2
li2 = append(li, 2:3)  ; li2
li2 = append(li, 2:4)  ; li2
# add element at specified position
li2.append(li, 'r', after = 2)  ; li2
# add element at specified position
li2.append(li, 'r', after = 2)  ; li2
# add element at specified position
li2 = append(li, 'r', after = 2)  ; li2
li2 = append(li, 2:4)  ; li2
# add element at specified position
li2 = append(li, 'r', after = 2)  ; li2
?paste0
?format
format(200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
scientific = TRUE)
200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
format(200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
scientific = TRUE)
format(200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
scientific = FALSE)
format(200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
scientific = FALSE)
if(condition){}
if(x<0){print("TRUE")}
x = -1
if(x<0){print("TRUE")}
if(x<0){paste(x,"is true")}  # TRUE
x = -1
if (x>0) { TRUE }
x = -1
if (x>0) { TRUE }
else{FALSE}
if (x>0) { TRUE } else{FALSE}
if (x>0) { TRUE
} else{FALSE}
if (x>0) { TRUE
} else{FALSE}
if x>0 {TRUE} else{FALSE}
)
)
x = -1
if (x>0) {TRUE} else{FALSE}
x
mylist <- list(Name = "Ravi", Age = 19, Marks = c(70, 85, 90))
mylist <- list(Name = "Ravi", Age = 19, Marks = c(70, 85, 90)) ; mylist
mylist[1,2]
mylist[1:2]
mean(mylist[3])
mean(mylist[[3]])
mylist = append(Gender = "Male" )
mylist = append("Gender" = "Male" )
mylist = append(mylist, Gender = "Male" )
mylist = append(Gender = "Male", after = 4 )
mylist[[3]][2] = 88
str(mylist)
mylist = append(mylist,c( Gender = "Male"))
str(mylist)
append(mylist,c( Gender = "Male"))
str(mylist)
marks <- c(56, 78, 92, 45, 68)
names <- c("Anu", "Ravi", "Zoya", "Amit", "Neha")
students <- data.frame(Name = names, Marks = marks)
names[c(marks>60)]
ifelse(marks>=75, "A", "B")
grades = c(ifelse(marks>=75, "A", "B"))
grades
students
students$grades = grades
students
x = 10
ifelse(x%%2 == 0 , "Even", "Odd")
v1 = c(10:20)
v1 = c(10:20) ; v1
v1 = c(10:20) ; v1
v2 = c(ifelse(v1%%2 == 0 , "Even", "Odd"))
v2
factored_grades = factor(grades)
factored_grades = factor(grades)  ; factored_grades
student_info <- list(students, length(students))  ; student_info
student_info <- list(students, length(names))  ; student_info
student_info[[1]][3]
student_info[[1]][1][3]
student_info[[1]][[1]][3]
student_info[[1]][1,3]
student_info[[1]][3]
student_info[[1]][1]
student_info[[1]][3,1]
result = factor(ifelse(marsk>=50, "Pass", "Fail"))
result = factor(ifelse(marks>=50, "Pass", "Fail"))
result
table(result)
numeric_levels = factor(result, labels = ifelse(result=="Pass", 1, 0))
numeric_levels = factor(result)
numeric_levels = factor(result, labels = c(1,2))  ; numeric_levels
numeric_levels = factor(result, labels = c(1,0))  ; numeric_levels
numeric_levels = factor(result, labels = c(0,1))  ; numeric_levels
numeric_levels = factor(result, labels = c(1 = "Pass", 0 = "Fail"))  ; numeric_levels
numeric_levels = factor(result, labels = c( "Pass" = 1, "Fail" = 0))  ; numeric_levels
df = data.frame(marks, result)   ; df
sum(numerc_levels)
sum(numeric_levels)
numeric_levels
sum(as.numeric(numeric_levels))
marks = c(45, 67, 89, 56, 72, 33, 90, 81, 60)
result = factor(ifelse(marks>=50, "Pass", "Fail")) ; result
table(result)
numeric_levels = factor(result, labels = c(0,1))  ; numeric_levels
# OR
numeric_levels = factor(result, labels = c( "Pass" = 1, "Fail" = 0))  ; numeric_levels
df = data.frame(marks, result)   ; df
numeric_levels
# OR
numeric_levels = factor(result, labels = c( "Pass" = 1, "Fail" = 0))  ; numeric_levels
numeric_levels = factor(result, labels = c(0,1))  ; numeric_levels
# OR
numeric_levels = factor(result, labels = c( "Fail" = 0, "Pass" = 1 ))  ; numeric_levels
sum(numeric_levels)
sum(as.numeric(numeric_levels))
sum(as.numeric(numeric_levels))
numeric_levels
sum(as.vector(numeric_levels))
sum((numeric_levels))
sum(ifelse(marks>=50, 1, 0)
print(sum(ifelse(marks>=50, 1, 0))
demo= sum(ifelse(marks>=50, 1, 0)
demo
demo= c(ifelse(marks>=50, 1, 0))
demo
sum(demo)
demo= ifelse(marks>=50, 1, 0)
sum(demo)
demo= ifelse(marks>=50,TRUE,FALSE)
sum(demo)
demo= ifelse(marks>=50,TRUE,FALSE)
sum(result)
# ********************************************
# For loop
# write the word for and press tab
x<-letters[10]
# ********************************************
# For loop
# write the word for and press tab
x<-letters[10] ; x
variable
x<-letters[1:10]
for (variable in x) {
variable
}
i
for (i in x) {
i
}
for (i in x) {
print(i)
}
for (i in x) {  print(i) }
for (j in 1:10) { print(j)}
for (k in 1:22) { print(i*7 )}
for (k in 1:22) { print( k*7 )}
++
?++
?++
for (i in 1:22) { print(paste0(i , "* 7 = ",i*7))}
for (i in 1:22) { print(paste0(i , "* 7 = ",i*7))}
n = as.numeric(readline("Enter number: "))
fact = 0
for (i in 1:n){ fact = fact*i }
fact
fact = 1
for (i in 1:n){ fact = fact*i }
fact
x = 2
while(x<=5)
{
print(x)
x = x+1
}
gc()
sum = 0
n = as.numeric(readline("Enter n: "))
while(i <= n){
sum=sum+i
i=i+1
}
sum = 0 ; i=0
while(i <= n){
sum=sum+i
i=i+1
}
sum
source("D:/cdac/5 R/Day 3/First.R")
source("D:/cdac/5 R/Day 3/First.R")
source("D:/cdac/5 R/Day 3/First.R")
x = 1
repeat{
print(x)
x = x+1
if(x>7) {break}
}
x = 7
repeat{
print(x)
x = x+7
if(x>70){break}
}
for ( i in 10) {
if (i %% 2 == 0){
next
}
print(i)
}
i
for ( i in 1:10) {
if (i %% 2 == 0){
next
}
print(i)
}
# Switch
color = 'red'
switch(color, "red" = "Stop here !",
"green" = "Go Ahead !",
"yellow" = "Wait !",
"invalid color")
for (i in x){if(i>20{print(i)})}
x = 15:25
for (i in x){if(i>20{print(i)})}
for (i in x){if(i>20){print(i)})}
for (i in x){if(i>20){print(i)}}
for (i in 1:24){
if ( i*7 %% 2 == 0){
print(i*7)
}
}
for (i in 1:24){
if ( i*7 %% 2 == 0){
print(i*7)
}
}
for (i in 1:24){
if ( (i*7) %% 2 == 0){
print(i*7)
}
}
for (i in 1:24){
if ( (i*7) %% 2 == 0){
print(paste(i, "=", (i*7)
}
for (i in 1:24){
if ( (i*7) %% 2 == 0){
print(paste(i, "=", (i*7))
}
for (i in 1:24){
if ( (i*7) %% 2 == 0){
print(paste(i, "=", (i*7)))
}
}
for (i in 1:24){
if ( (i*7) %% 2 == 0){
print(paste(i, "x 7 =", (i*7)))
}
}
v1 = c(10,20)
ifelse(v1[1]>v1[2], paste(v1[1], "is greater", paste(v1[2], 'is greater') ))
ifelse(v1[1]>v1[2], paste(v1[1], "is greater"), paste(v1[2], 'is greater') )
#4 Create a character vector with 5 consonant
# alphabets and 3 vowels then print all the vowels from this vector using control statement
v2 = c('a','e','i','b','c','d','f','g')
print(v2 %in% c('a','e','i','o','u'))
print(which = v2 %in% c('a','e','i','o','u'))
print(which = (v2 %in% c('a','e','i','o','u'))
print(which == (v2 %in% c('a','e','i','o','u'))
for (i in v2){
if (i %in% c('a','e','i','o','u'))
{
print(i)
}
}
colors = c('red', "green")
switch(colors, "red" = "Stop here !",
"green" = "Go Ahead !",
"yellow" = "Wait !",
"invalid color")
choice <- menu(c("Add", "subtract", "multiply", 'divide'), title = "select operation number: ")
#5 Create an arithmetic operator calculator using switch
{
n1 = as.numeric(readline("Enter n1: "))
n2 = as.numeric(readline("Enter n2: "))
choice <- menu(c("Add", "subtract", "multiply", 'divide'), title = "select operation number: ")
}
{
n1 = as.numeric(readline("Enter n1: "))
n2 = as.numeric(readline("Enter n2: "))
choice <- menu(c("Add", "subtract", "multiply", 'divide'), title = "select operation number: ")
}
3 = paste("product = ", n1*n2),
print(switch(choice, 1=print(paste("sum = ", n1+n2)),
)
print(switch(choice, 1= n1+n2),
print(switch(choice, "1" = n1+n2),
"2" = n1-n2,
"3" = n1*n2,
"4" = n1/n2
)
{
n1 = as.numeric(readline("Enter n1: "))
n2 = as.numeric(readline("Enter n2: "))
choice <- menu(c("Add", "subtract", "multiply", 'divide'), title = "select operation number: ")
}
